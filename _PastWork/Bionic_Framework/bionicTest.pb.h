// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bionicTest.proto

#ifndef PROTOBUF_bionicTest_2eproto__INCLUDED
#define PROTOBUF_bionicTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bionicTest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bionicTest_2eproto();
void protobuf_AssignDesc_bionicTest_2eproto();
void protobuf_ShutdownFile_bionicTest_2eproto();

class MotionData;

// ===================================================================

class MotionData : public ::google::protobuf::Message {
 public:
  MotionData();
  virtual ~MotionData();

  MotionData(const MotionData& from);

  inline MotionData& operator=(const MotionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionData& default_instance();

  void Swap(MotionData* other);

  // implements Message ----------------------------------------------

  MotionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionData& from);
  void MergeFrom(const MotionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 yaw = 2;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 2;
  inline ::google::protobuf::int32 yaw() const;
  inline void set_yaw(::google::protobuf::int32 value);

  // required int32 pitch = 3;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 3;
  inline ::google::protobuf::int32 pitch() const;
  inline void set_pitch(::google::protobuf::int32 value);

  // required int32 roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline ::google::protobuf::int32 roll() const;
  inline void set_roll(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bionicTest.MotionData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 yaw_;
  ::google::protobuf::int32 pitch_;
  ::google::protobuf::int32 roll_;
  friend void  protobuf_AddDesc_bionicTest_2eproto();
  friend void protobuf_AssignDesc_bionicTest_2eproto();
  friend void protobuf_ShutdownFile_bionicTest_2eproto();

  void InitAsDefaultInstance();
  static MotionData* default_instance_;
};
// ===================================================================


// ===================================================================

// MotionData

// required int32 id = 1;
inline bool MotionData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MotionData::id() const {
  // @@protoc_insertion_point(field_get:bionicTest.MotionData.id)
  return id_;
}
inline void MotionData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bionicTest.MotionData.id)
}

// required int32 yaw = 2;
inline bool MotionData::has_yaw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionData::set_has_yaw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionData::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionData::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline ::google::protobuf::int32 MotionData::yaw() const {
  // @@protoc_insertion_point(field_get:bionicTest.MotionData.yaw)
  return yaw_;
}
inline void MotionData::set_yaw(::google::protobuf::int32 value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:bionicTest.MotionData.yaw)
}

// required int32 pitch = 3;
inline bool MotionData::has_pitch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionData::set_has_pitch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionData::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionData::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline ::google::protobuf::int32 MotionData::pitch() const {
  // @@protoc_insertion_point(field_get:bionicTest.MotionData.pitch)
  return pitch_;
}
inline void MotionData::set_pitch(::google::protobuf::int32 value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:bionicTest.MotionData.pitch)
}

// required int32 roll = 4;
inline bool MotionData::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionData::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionData::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionData::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline ::google::protobuf::int32 MotionData::roll() const {
  // @@protoc_insertion_point(field_get:bionicTest.MotionData.roll)
  return roll_;
}
inline void MotionData::set_roll(::google::protobuf::int32 value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:bionicTest.MotionData.roll)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bionicTest

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bionicTest_2eproto__INCLUDED
