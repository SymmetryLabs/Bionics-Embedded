// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bionic.proto

#ifndef PROTOBUF_bionic_2eproto__INCLUDED
#define PROTOBUF_bionic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bionic {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bionic_2eproto();
void protobuf_AssignDesc_bionic_2eproto();
void protobuf_ShutdownFile_bionic_2eproto();

class CentralControlsReport;
class CentralControlsReport_CentralControl;
class UnitMotionReport;
class UnitMotionReport_UnitMotion;
class UnitParametersReport;
class UnitParametersReport_UnitParameter;

enum CentralControlsReport_CentralControl_ControlType {
  CentralControlsReport_CentralControl_ControlType_ANIMATION_CHANGE = 0,
  CentralControlsReport_CentralControl_ControlType_PARAMETER_CHANGE = 1
};
bool CentralControlsReport_CentralControl_ControlType_IsValid(int value);
const CentralControlsReport_CentralControl_ControlType CentralControlsReport_CentralControl_ControlType_ControlType_MIN = CentralControlsReport_CentralControl_ControlType_ANIMATION_CHANGE;
const CentralControlsReport_CentralControl_ControlType CentralControlsReport_CentralControl_ControlType_ControlType_MAX = CentralControlsReport_CentralControl_ControlType_PARAMETER_CHANGE;
const int CentralControlsReport_CentralControl_ControlType_ControlType_ARRAYSIZE = CentralControlsReport_CentralControl_ControlType_ControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CentralControlsReport_CentralControl_ControlType_descriptor();
inline const ::std::string& CentralControlsReport_CentralControl_ControlType_Name(CentralControlsReport_CentralControl_ControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CentralControlsReport_CentralControl_ControlType_descriptor(), value);
}
inline bool CentralControlsReport_CentralControl_ControlType_Parse(
    const ::std::string& name, CentralControlsReport_CentralControl_ControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CentralControlsReport_CentralControl_ControlType>(
    CentralControlsReport_CentralControl_ControlType_descriptor(), name, value);
}
enum UnitMotionReport_UnitMotion_MotionType {
  UnitMotionReport_UnitMotion_MotionType_ACCEL_MAGNITUDE = 0,
  UnitMotionReport_UnitMotion_MotionType_YAW = 1,
  UnitMotionReport_UnitMotion_MotionType_PITCH = 2,
  UnitMotionReport_UnitMotion_MotionType_ROLL = 3
};
bool UnitMotionReport_UnitMotion_MotionType_IsValid(int value);
const UnitMotionReport_UnitMotion_MotionType UnitMotionReport_UnitMotion_MotionType_MotionType_MIN = UnitMotionReport_UnitMotion_MotionType_ACCEL_MAGNITUDE;
const UnitMotionReport_UnitMotion_MotionType UnitMotionReport_UnitMotion_MotionType_MotionType_MAX = UnitMotionReport_UnitMotion_MotionType_ROLL;
const int UnitMotionReport_UnitMotion_MotionType_MotionType_ARRAYSIZE = UnitMotionReport_UnitMotion_MotionType_MotionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnitMotionReport_UnitMotion_MotionType_descriptor();
inline const ::std::string& UnitMotionReport_UnitMotion_MotionType_Name(UnitMotionReport_UnitMotion_MotionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnitMotionReport_UnitMotion_MotionType_descriptor(), value);
}
inline bool UnitMotionReport_UnitMotion_MotionType_Parse(
    const ::std::string& name, UnitMotionReport_UnitMotion_MotionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitMotionReport_UnitMotion_MotionType>(
    UnitMotionReport_UnitMotion_MotionType_descriptor(), name, value);
}
// ===================================================================

class CentralControlsReport_CentralControl : public ::google::protobuf::Message {
 public:
  CentralControlsReport_CentralControl();
  virtual ~CentralControlsReport_CentralControl();

  CentralControlsReport_CentralControl(const CentralControlsReport_CentralControl& from);

  inline CentralControlsReport_CentralControl& operator=(const CentralControlsReport_CentralControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CentralControlsReport_CentralControl& default_instance();

  void Swap(CentralControlsReport_CentralControl* other);

  // implements Message ----------------------------------------------

  CentralControlsReport_CentralControl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CentralControlsReport_CentralControl& from);
  void MergeFrom(const CentralControlsReport_CentralControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CentralControlsReport_CentralControl_ControlType ControlType;
  static const ControlType ANIMATION_CHANGE = CentralControlsReport_CentralControl_ControlType_ANIMATION_CHANGE;
  static const ControlType PARAMETER_CHANGE = CentralControlsReport_CentralControl_ControlType_PARAMETER_CHANGE;
  static inline bool ControlType_IsValid(int value) {
    return CentralControlsReport_CentralControl_ControlType_IsValid(value);
  }
  static const ControlType ControlType_MIN =
    CentralControlsReport_CentralControl_ControlType_ControlType_MIN;
  static const ControlType ControlType_MAX =
    CentralControlsReport_CentralControl_ControlType_ControlType_MAX;
  static const int ControlType_ARRAYSIZE =
    CentralControlsReport_CentralControl_ControlType_ControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlType_descriptor() {
    return CentralControlsReport_CentralControl_ControlType_descriptor();
  }
  static inline const ::std::string& ControlType_Name(ControlType value) {
    return CentralControlsReport_CentralControl_ControlType_Name(value);
  }
  static inline bool ControlType_Parse(const ::std::string& name,
      ControlType* value) {
    return CentralControlsReport_CentralControl_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .bionic.CentralControlsReport.CentralControl.ControlType controlType = 1;
  inline bool has_controltype() const;
  inline void clear_controltype();
  static const int kControlTypeFieldNumber = 1;
  inline ::bionic::CentralControlsReport_CentralControl_ControlType controltype() const;
  inline void set_controltype(::bionic::CentralControlsReport_CentralControl_ControlType value);

  // required float controlParameter = 2;
  inline bool has_controlparameter() const;
  inline void clear_controlparameter();
  static const int kControlParameterFieldNumber = 2;
  inline float controlparameter() const;
  inline void set_controlparameter(float value);

  // @@protoc_insertion_point(class_scope:bionic.CentralControlsReport.CentralControl)
 private:
  inline void set_has_controltype();
  inline void clear_has_controltype();
  inline void set_has_controlparameter();
  inline void clear_has_controlparameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int controltype_;
  float controlparameter_;
  friend void  protobuf_AddDesc_bionic_2eproto();
  friend void protobuf_AssignDesc_bionic_2eproto();
  friend void protobuf_ShutdownFile_bionic_2eproto();

  void InitAsDefaultInstance();
  static CentralControlsReport_CentralControl* default_instance_;
};
// -------------------------------------------------------------------

class CentralControlsReport : public ::google::protobuf::Message {
 public:
  CentralControlsReport();
  virtual ~CentralControlsReport();

  CentralControlsReport(const CentralControlsReport& from);

  inline CentralControlsReport& operator=(const CentralControlsReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CentralControlsReport& default_instance();

  void Swap(CentralControlsReport* other);

  // implements Message ----------------------------------------------

  CentralControlsReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CentralControlsReport& from);
  void MergeFrom(const CentralControlsReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CentralControlsReport_CentralControl CentralControl;

  // accessors -------------------------------------------------------

  // repeated .bionic.CentralControlsReport.CentralControl centralControl = 1;
  inline int centralcontrol_size() const;
  inline void clear_centralcontrol();
  static const int kCentralControlFieldNumber = 1;
  inline const ::bionic::CentralControlsReport_CentralControl& centralcontrol(int index) const;
  inline ::bionic::CentralControlsReport_CentralControl* mutable_centralcontrol(int index);
  inline ::bionic::CentralControlsReport_CentralControl* add_centralcontrol();
  inline const ::google::protobuf::RepeatedPtrField< ::bionic::CentralControlsReport_CentralControl >&
      centralcontrol() const;
  inline ::google::protobuf::RepeatedPtrField< ::bionic::CentralControlsReport_CentralControl >*
      mutable_centralcontrol();

  // @@protoc_insertion_point(class_scope:bionic.CentralControlsReport)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bionic::CentralControlsReport_CentralControl > centralcontrol_;
  friend void  protobuf_AddDesc_bionic_2eproto();
  friend void protobuf_AssignDesc_bionic_2eproto();
  friend void protobuf_ShutdownFile_bionic_2eproto();

  void InitAsDefaultInstance();
  static CentralControlsReport* default_instance_;
};
// -------------------------------------------------------------------

class UnitMotionReport_UnitMotion : public ::google::protobuf::Message {
 public:
  UnitMotionReport_UnitMotion();
  virtual ~UnitMotionReport_UnitMotion();

  UnitMotionReport_UnitMotion(const UnitMotionReport_UnitMotion& from);

  inline UnitMotionReport_UnitMotion& operator=(const UnitMotionReport_UnitMotion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitMotionReport_UnitMotion& default_instance();

  void Swap(UnitMotionReport_UnitMotion* other);

  // implements Message ----------------------------------------------

  UnitMotionReport_UnitMotion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitMotionReport_UnitMotion& from);
  void MergeFrom(const UnitMotionReport_UnitMotion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UnitMotionReport_UnitMotion_MotionType MotionType;
  static const MotionType ACCEL_MAGNITUDE = UnitMotionReport_UnitMotion_MotionType_ACCEL_MAGNITUDE;
  static const MotionType YAW = UnitMotionReport_UnitMotion_MotionType_YAW;
  static const MotionType PITCH = UnitMotionReport_UnitMotion_MotionType_PITCH;
  static const MotionType ROLL = UnitMotionReport_UnitMotion_MotionType_ROLL;
  static inline bool MotionType_IsValid(int value) {
    return UnitMotionReport_UnitMotion_MotionType_IsValid(value);
  }
  static const MotionType MotionType_MIN =
    UnitMotionReport_UnitMotion_MotionType_MotionType_MIN;
  static const MotionType MotionType_MAX =
    UnitMotionReport_UnitMotion_MotionType_MotionType_MAX;
  static const int MotionType_ARRAYSIZE =
    UnitMotionReport_UnitMotion_MotionType_MotionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotionType_descriptor() {
    return UnitMotionReport_UnitMotion_MotionType_descriptor();
  }
  static inline const ::std::string& MotionType_Name(MotionType value) {
    return UnitMotionReport_UnitMotion_MotionType_Name(value);
  }
  static inline bool MotionType_Parse(const ::std::string& name,
      MotionType* value) {
    return UnitMotionReport_UnitMotion_MotionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .bionic.UnitMotionReport.UnitMotion.MotionType motionType = 1;
  inline bool has_motiontype() const;
  inline void clear_motiontype();
  static const int kMotionTypeFieldNumber = 1;
  inline ::bionic::UnitMotionReport_UnitMotion_MotionType motiontype() const;
  inline void set_motiontype(::bionic::UnitMotionReport_UnitMotion_MotionType value);

  // required float motionData = 2;
  inline bool has_motiondata() const;
  inline void clear_motiondata();
  static const int kMotionDataFieldNumber = 2;
  inline float motiondata() const;
  inline void set_motiondata(float value);

  // @@protoc_insertion_point(class_scope:bionic.UnitMotionReport.UnitMotion)
 private:
  inline void set_has_motiontype();
  inline void clear_has_motiontype();
  inline void set_has_motiondata();
  inline void clear_has_motiondata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int motiontype_;
  float motiondata_;
  friend void  protobuf_AddDesc_bionic_2eproto();
  friend void protobuf_AssignDesc_bionic_2eproto();
  friend void protobuf_ShutdownFile_bionic_2eproto();

  void InitAsDefaultInstance();
  static UnitMotionReport_UnitMotion* default_instance_;
};
// -------------------------------------------------------------------

class UnitMotionReport : public ::google::protobuf::Message {
 public:
  UnitMotionReport();
  virtual ~UnitMotionReport();

  UnitMotionReport(const UnitMotionReport& from);

  inline UnitMotionReport& operator=(const UnitMotionReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitMotionReport& default_instance();

  void Swap(UnitMotionReport* other);

  // implements Message ----------------------------------------------

  UnitMotionReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitMotionReport& from);
  void MergeFrom(const UnitMotionReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UnitMotionReport_UnitMotion UnitMotion;

  // accessors -------------------------------------------------------

  // repeated .bionic.UnitMotionReport.UnitMotion unitMotion = 1;
  inline int unitmotion_size() const;
  inline void clear_unitmotion();
  static const int kUnitMotionFieldNumber = 1;
  inline const ::bionic::UnitMotionReport_UnitMotion& unitmotion(int index) const;
  inline ::bionic::UnitMotionReport_UnitMotion* mutable_unitmotion(int index);
  inline ::bionic::UnitMotionReport_UnitMotion* add_unitmotion();
  inline const ::google::protobuf::RepeatedPtrField< ::bionic::UnitMotionReport_UnitMotion >&
      unitmotion() const;
  inline ::google::protobuf::RepeatedPtrField< ::bionic::UnitMotionReport_UnitMotion >*
      mutable_unitmotion();

  // @@protoc_insertion_point(class_scope:bionic.UnitMotionReport)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bionic::UnitMotionReport_UnitMotion > unitmotion_;
  friend void  protobuf_AddDesc_bionic_2eproto();
  friend void protobuf_AssignDesc_bionic_2eproto();
  friend void protobuf_ShutdownFile_bionic_2eproto();

  void InitAsDefaultInstance();
  static UnitMotionReport* default_instance_;
};
// -------------------------------------------------------------------

class UnitParametersReport_UnitParameter : public ::google::protobuf::Message {
 public:
  UnitParametersReport_UnitParameter();
  virtual ~UnitParametersReport_UnitParameter();

  UnitParametersReport_UnitParameter(const UnitParametersReport_UnitParameter& from);

  inline UnitParametersReport_UnitParameter& operator=(const UnitParametersReport_UnitParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitParametersReport_UnitParameter& default_instance();

  void Swap(UnitParametersReport_UnitParameter* other);

  // implements Message ----------------------------------------------

  UnitParametersReport_UnitParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitParametersReport_UnitParameter& from);
  void MergeFrom(const UnitParametersReport_UnitParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float minVal = 2;
  inline bool has_minval() const;
  inline void clear_minval();
  static const int kMinValFieldNumber = 2;
  inline float minval() const;
  inline void set_minval(float value);

  // required float maxVal = 3;
  inline bool has_maxval() const;
  inline void clear_maxval();
  static const int kMaxValFieldNumber = 3;
  inline float maxval() const;
  inline void set_maxval(float value);

  // required float currentVal = 4;
  inline bool has_currentval() const;
  inline void clear_currentval();
  static const int kCurrentValFieldNumber = 4;
  inline float currentval() const;
  inline void set_currentval(float value);

  // @@protoc_insertion_point(class_scope:bionic.UnitParametersReport.UnitParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_minval();
  inline void clear_has_minval();
  inline void set_has_maxval();
  inline void clear_has_maxval();
  inline void set_has_currentval();
  inline void clear_has_currentval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float minval_;
  float maxval_;
  float currentval_;
  friend void  protobuf_AddDesc_bionic_2eproto();
  friend void protobuf_AssignDesc_bionic_2eproto();
  friend void protobuf_ShutdownFile_bionic_2eproto();

  void InitAsDefaultInstance();
  static UnitParametersReport_UnitParameter* default_instance_;
};
// -------------------------------------------------------------------

class UnitParametersReport : public ::google::protobuf::Message {
 public:
  UnitParametersReport();
  virtual ~UnitParametersReport();

  UnitParametersReport(const UnitParametersReport& from);

  inline UnitParametersReport& operator=(const UnitParametersReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitParametersReport& default_instance();

  void Swap(UnitParametersReport* other);

  // implements Message ----------------------------------------------

  UnitParametersReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitParametersReport& from);
  void MergeFrom(const UnitParametersReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UnitParametersReport_UnitParameter UnitParameter;

  // accessors -------------------------------------------------------

  // repeated .bionic.UnitParametersReport.UnitParameter unitParameter = 1;
  inline int unitparameter_size() const;
  inline void clear_unitparameter();
  static const int kUnitParameterFieldNumber = 1;
  inline const ::bionic::UnitParametersReport_UnitParameter& unitparameter(int index) const;
  inline ::bionic::UnitParametersReport_UnitParameter* mutable_unitparameter(int index);
  inline ::bionic::UnitParametersReport_UnitParameter* add_unitparameter();
  inline const ::google::protobuf::RepeatedPtrField< ::bionic::UnitParametersReport_UnitParameter >&
      unitparameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::bionic::UnitParametersReport_UnitParameter >*
      mutable_unitparameter();

  // @@protoc_insertion_point(class_scope:bionic.UnitParametersReport)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bionic::UnitParametersReport_UnitParameter > unitparameter_;
  friend void  protobuf_AddDesc_bionic_2eproto();
  friend void protobuf_AssignDesc_bionic_2eproto();
  friend void protobuf_ShutdownFile_bionic_2eproto();

  void InitAsDefaultInstance();
  static UnitParametersReport* default_instance_;
};
// ===================================================================


// ===================================================================

// CentralControlsReport_CentralControl

// required .bionic.CentralControlsReport.CentralControl.ControlType controlType = 1;
inline bool CentralControlsReport_CentralControl::has_controltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CentralControlsReport_CentralControl::set_has_controltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CentralControlsReport_CentralControl::clear_has_controltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CentralControlsReport_CentralControl::clear_controltype() {
  controltype_ = 0;
  clear_has_controltype();
}
inline ::bionic::CentralControlsReport_CentralControl_ControlType CentralControlsReport_CentralControl::controltype() const {
  // @@protoc_insertion_point(field_get:bionic.CentralControlsReport.CentralControl.controlType)
  return static_cast< ::bionic::CentralControlsReport_CentralControl_ControlType >(controltype_);
}
inline void CentralControlsReport_CentralControl::set_controltype(::bionic::CentralControlsReport_CentralControl_ControlType value) {
  assert(::bionic::CentralControlsReport_CentralControl_ControlType_IsValid(value));
  set_has_controltype();
  controltype_ = value;
  // @@protoc_insertion_point(field_set:bionic.CentralControlsReport.CentralControl.controlType)
}

// required float controlParameter = 2;
inline bool CentralControlsReport_CentralControl::has_controlparameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CentralControlsReport_CentralControl::set_has_controlparameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CentralControlsReport_CentralControl::clear_has_controlparameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CentralControlsReport_CentralControl::clear_controlparameter() {
  controlparameter_ = 0;
  clear_has_controlparameter();
}
inline float CentralControlsReport_CentralControl::controlparameter() const {
  // @@protoc_insertion_point(field_get:bionic.CentralControlsReport.CentralControl.controlParameter)
  return controlparameter_;
}
inline void CentralControlsReport_CentralControl::set_controlparameter(float value) {
  set_has_controlparameter();
  controlparameter_ = value;
  // @@protoc_insertion_point(field_set:bionic.CentralControlsReport.CentralControl.controlParameter)
}

// -------------------------------------------------------------------

// CentralControlsReport

// repeated .bionic.CentralControlsReport.CentralControl centralControl = 1;
inline int CentralControlsReport::centralcontrol_size() const {
  return centralcontrol_.size();
}
inline void CentralControlsReport::clear_centralcontrol() {
  centralcontrol_.Clear();
}
inline const ::bionic::CentralControlsReport_CentralControl& CentralControlsReport::centralcontrol(int index) const {
  // @@protoc_insertion_point(field_get:bionic.CentralControlsReport.centralControl)
  return centralcontrol_.Get(index);
}
inline ::bionic::CentralControlsReport_CentralControl* CentralControlsReport::mutable_centralcontrol(int index) {
  // @@protoc_insertion_point(field_mutable:bionic.CentralControlsReport.centralControl)
  return centralcontrol_.Mutable(index);
}
inline ::bionic::CentralControlsReport_CentralControl* CentralControlsReport::add_centralcontrol() {
  // @@protoc_insertion_point(field_add:bionic.CentralControlsReport.centralControl)
  return centralcontrol_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bionic::CentralControlsReport_CentralControl >&
CentralControlsReport::centralcontrol() const {
  // @@protoc_insertion_point(field_list:bionic.CentralControlsReport.centralControl)
  return centralcontrol_;
}
inline ::google::protobuf::RepeatedPtrField< ::bionic::CentralControlsReport_CentralControl >*
CentralControlsReport::mutable_centralcontrol() {
  // @@protoc_insertion_point(field_mutable_list:bionic.CentralControlsReport.centralControl)
  return &centralcontrol_;
}

// -------------------------------------------------------------------

// UnitMotionReport_UnitMotion

// required .bionic.UnitMotionReport.UnitMotion.MotionType motionType = 1;
inline bool UnitMotionReport_UnitMotion::has_motiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitMotionReport_UnitMotion::set_has_motiontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitMotionReport_UnitMotion::clear_has_motiontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitMotionReport_UnitMotion::clear_motiontype() {
  motiontype_ = 0;
  clear_has_motiontype();
}
inline ::bionic::UnitMotionReport_UnitMotion_MotionType UnitMotionReport_UnitMotion::motiontype() const {
  // @@protoc_insertion_point(field_get:bionic.UnitMotionReport.UnitMotion.motionType)
  return static_cast< ::bionic::UnitMotionReport_UnitMotion_MotionType >(motiontype_);
}
inline void UnitMotionReport_UnitMotion::set_motiontype(::bionic::UnitMotionReport_UnitMotion_MotionType value) {
  assert(::bionic::UnitMotionReport_UnitMotion_MotionType_IsValid(value));
  set_has_motiontype();
  motiontype_ = value;
  // @@protoc_insertion_point(field_set:bionic.UnitMotionReport.UnitMotion.motionType)
}

// required float motionData = 2;
inline bool UnitMotionReport_UnitMotion::has_motiondata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitMotionReport_UnitMotion::set_has_motiondata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitMotionReport_UnitMotion::clear_has_motiondata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitMotionReport_UnitMotion::clear_motiondata() {
  motiondata_ = 0;
  clear_has_motiondata();
}
inline float UnitMotionReport_UnitMotion::motiondata() const {
  // @@protoc_insertion_point(field_get:bionic.UnitMotionReport.UnitMotion.motionData)
  return motiondata_;
}
inline void UnitMotionReport_UnitMotion::set_motiondata(float value) {
  set_has_motiondata();
  motiondata_ = value;
  // @@protoc_insertion_point(field_set:bionic.UnitMotionReport.UnitMotion.motionData)
}

// -------------------------------------------------------------------

// UnitMotionReport

// repeated .bionic.UnitMotionReport.UnitMotion unitMotion = 1;
inline int UnitMotionReport::unitmotion_size() const {
  return unitmotion_.size();
}
inline void UnitMotionReport::clear_unitmotion() {
  unitmotion_.Clear();
}
inline const ::bionic::UnitMotionReport_UnitMotion& UnitMotionReport::unitmotion(int index) const {
  // @@protoc_insertion_point(field_get:bionic.UnitMotionReport.unitMotion)
  return unitmotion_.Get(index);
}
inline ::bionic::UnitMotionReport_UnitMotion* UnitMotionReport::mutable_unitmotion(int index) {
  // @@protoc_insertion_point(field_mutable:bionic.UnitMotionReport.unitMotion)
  return unitmotion_.Mutable(index);
}
inline ::bionic::UnitMotionReport_UnitMotion* UnitMotionReport::add_unitmotion() {
  // @@protoc_insertion_point(field_add:bionic.UnitMotionReport.unitMotion)
  return unitmotion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bionic::UnitMotionReport_UnitMotion >&
UnitMotionReport::unitmotion() const {
  // @@protoc_insertion_point(field_list:bionic.UnitMotionReport.unitMotion)
  return unitmotion_;
}
inline ::google::protobuf::RepeatedPtrField< ::bionic::UnitMotionReport_UnitMotion >*
UnitMotionReport::mutable_unitmotion() {
  // @@protoc_insertion_point(field_mutable_list:bionic.UnitMotionReport.unitMotion)
  return &unitmotion_;
}

// -------------------------------------------------------------------

// UnitParametersReport_UnitParameter

// required string name = 1;
inline bool UnitParametersReport_UnitParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitParametersReport_UnitParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitParametersReport_UnitParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitParametersReport_UnitParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnitParametersReport_UnitParameter::name() const {
  // @@protoc_insertion_point(field_get:bionic.UnitParametersReport.UnitParameter.name)
  return *name_;
}
inline void UnitParametersReport_UnitParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bionic.UnitParametersReport.UnitParameter.name)
}
inline void UnitParametersReport_UnitParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bionic.UnitParametersReport.UnitParameter.name)
}
inline void UnitParametersReport_UnitParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bionic.UnitParametersReport.UnitParameter.name)
}
inline ::std::string* UnitParametersReport_UnitParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bionic.UnitParametersReport.UnitParameter.name)
  return name_;
}
inline ::std::string* UnitParametersReport_UnitParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnitParametersReport_UnitParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bionic.UnitParametersReport.UnitParameter.name)
}

// required float minVal = 2;
inline bool UnitParametersReport_UnitParameter::has_minval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitParametersReport_UnitParameter::set_has_minval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitParametersReport_UnitParameter::clear_has_minval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitParametersReport_UnitParameter::clear_minval() {
  minval_ = 0;
  clear_has_minval();
}
inline float UnitParametersReport_UnitParameter::minval() const {
  // @@protoc_insertion_point(field_get:bionic.UnitParametersReport.UnitParameter.minVal)
  return minval_;
}
inline void UnitParametersReport_UnitParameter::set_minval(float value) {
  set_has_minval();
  minval_ = value;
  // @@protoc_insertion_point(field_set:bionic.UnitParametersReport.UnitParameter.minVal)
}

// required float maxVal = 3;
inline bool UnitParametersReport_UnitParameter::has_maxval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitParametersReport_UnitParameter::set_has_maxval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitParametersReport_UnitParameter::clear_has_maxval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitParametersReport_UnitParameter::clear_maxval() {
  maxval_ = 0;
  clear_has_maxval();
}
inline float UnitParametersReport_UnitParameter::maxval() const {
  // @@protoc_insertion_point(field_get:bionic.UnitParametersReport.UnitParameter.maxVal)
  return maxval_;
}
inline void UnitParametersReport_UnitParameter::set_maxval(float value) {
  set_has_maxval();
  maxval_ = value;
  // @@protoc_insertion_point(field_set:bionic.UnitParametersReport.UnitParameter.maxVal)
}

// required float currentVal = 4;
inline bool UnitParametersReport_UnitParameter::has_currentval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnitParametersReport_UnitParameter::set_has_currentval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnitParametersReport_UnitParameter::clear_has_currentval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnitParametersReport_UnitParameter::clear_currentval() {
  currentval_ = 0;
  clear_has_currentval();
}
inline float UnitParametersReport_UnitParameter::currentval() const {
  // @@protoc_insertion_point(field_get:bionic.UnitParametersReport.UnitParameter.currentVal)
  return currentval_;
}
inline void UnitParametersReport_UnitParameter::set_currentval(float value) {
  set_has_currentval();
  currentval_ = value;
  // @@protoc_insertion_point(field_set:bionic.UnitParametersReport.UnitParameter.currentVal)
}

// -------------------------------------------------------------------

// UnitParametersReport

// repeated .bionic.UnitParametersReport.UnitParameter unitParameter = 1;
inline int UnitParametersReport::unitparameter_size() const {
  return unitparameter_.size();
}
inline void UnitParametersReport::clear_unitparameter() {
  unitparameter_.Clear();
}
inline const ::bionic::UnitParametersReport_UnitParameter& UnitParametersReport::unitparameter(int index) const {
  // @@protoc_insertion_point(field_get:bionic.UnitParametersReport.unitParameter)
  return unitparameter_.Get(index);
}
inline ::bionic::UnitParametersReport_UnitParameter* UnitParametersReport::mutable_unitparameter(int index) {
  // @@protoc_insertion_point(field_mutable:bionic.UnitParametersReport.unitParameter)
  return unitparameter_.Mutable(index);
}
inline ::bionic::UnitParametersReport_UnitParameter* UnitParametersReport::add_unitparameter() {
  // @@protoc_insertion_point(field_add:bionic.UnitParametersReport.unitParameter)
  return unitparameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bionic::UnitParametersReport_UnitParameter >&
UnitParametersReport::unitparameter() const {
  // @@protoc_insertion_point(field_list:bionic.UnitParametersReport.unitParameter)
  return unitparameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::bionic::UnitParametersReport_UnitParameter >*
UnitParametersReport::mutable_unitparameter() {
  // @@protoc_insertion_point(field_mutable_list:bionic.UnitParametersReport.unitParameter)
  return &unitparameter_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bionic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bionic::CentralControlsReport_CentralControl_ControlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bionic::CentralControlsReport_CentralControl_ControlType>() {
  return ::bionic::CentralControlsReport_CentralControl_ControlType_descriptor();
}
template <> struct is_proto_enum< ::bionic::UnitMotionReport_UnitMotion_MotionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bionic::UnitMotionReport_UnitMotion_MotionType>() {
  return ::bionic::UnitMotionReport_UnitMotion_MotionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bionic_2eproto__INCLUDED
